---
- name: Configure Kubernetes Nodes
  hosts: web_servers
  become: true
  tasks:
    - name: Update package cache
      apt:
        update_cache: yes

    - name: Gather facts
      package_facts:
        manager: auto

    - name: Install required Kubernetes packages
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - kubectl
        - kubeadm
        - kubelet
        - vim
        - git
        - wget
      when: "item not in ansible_facts.packages"

    - name: Hold Kubernetes package versions
      shell:
        cmd: "sudo apt-mark hold {{ item }}"
      loop:
        - kubelet
        - kubeadm
        - kubectl
      # when: not dpkg_check.stdout_lines | select("match", "^kubelet[[:space:]]+hold") | list
      # register: dpkg_check

    - name: Show the result of dpkg check
      debug:
        var: dpkg_check

    - name: Disable swap
      command:
        cmd: "swapoff -a"
      # when: ansible_swaptotal_mb > 0

    - name: Comment out swap entry in /etc/fstab
      lineinfile:
        path: "/etc/fstab"
        regexp: "^/swapfile"
        line: "# /swapfile"
        state: present
      # when: ansible_swaptotal_mb > 0

    - name: Check if k8s.conf file with kernel modules is created
      stat:
        path: "/etc/modules-load.d/k8s.conf"
      register: kernel_modules

    - name: Create k8s.conf file with required kernel modules
      file:
        path: "/etc/modules-load.d/k8s.conf"
        state: touch
      when: "not kernel_modules.stat.exists"

    - name: Add required kernel modules to k8s.conf file
      lineinfile:
        path: "/etc/modules-load.d/k8s.conf"
        line: "{{ item }}"
      loop:
        - overlay
        - br_netfilter
      when: "not kernel_modules.stat.exists"

    - name: Load kernel modules
      shell:
        cmd: "sudo modprobe {{ item }}"
      loop:
        - overlay
        - br_netfilter
      when: "not kernel_modules.stat.exists"

    - name: Check if k8s.conf file with sysctl settings exists
      stat:
        path: "/etc/sysctl.d/k8s.conf"
      register: sysctl_settings

    - name: Create k8s.conf file with sysctl settings
      file:
        path: "/etc/sysctl.d/k8s.conf"
        state: touch
      when: "not sysctl_settings.stat.exists"

    - name: Insert sysctl settings into k8s.conf file
      blockinfile:
        path: "/etc/sysctl.d/k8s.conf"
        block: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
      when: "not sysctl_settings.stat.exists"

    - name: Check if sysctl settings have been applied
      stat:
        path: "/etc/sysctl.conf"
      register: sysctl_check

    - name: Debug information about the directory
      debug:
        var: sysctl_check

    - name: Apply sysctl settings
      command:
        cmd: "sudo sysctl --system"
      when: "not sysctl_check.stat.exists"

    # - name: Enable and start kubelet service
    #   service:
    #     name: kubelet
    #     enabled: yes
    #     state: started

    # - name: Initialize the cluster
    #   shell:
    #     cmd: "kubeadm init --pod-network-cidr=10.10.20.10"
    #     creates: "/etc/kubernetes/admin.conf"

    # - name: Copy kubeconfig to user's home directory
    #   copy:
    #     src: "/etc/kubernetes/admin.conf"
    #     dest: "/home/{{ ansible_user }}/.kube/config"
    #     owner: "{{ ansible_user }}"
    #     group: "{{ ansible_user }}"
    #     mode: "0644"

    # - name: Install Calico network plugin
    #   shell:
    #     cmd: "kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml"
    #     creates: "/etc/kubernetes/manifests/calico.yaml"

    # - name: Generate join command
    #   shell:
    #     cmd: "kubeadm token create --print-join-command"
    #   register: join_command

    # - name: Copy join command to user's home directory
    #   copy:
    #     content: "{{ join_command.stdout_lines[0] }}"
    #     dest: "/home/{{ ansible_user }}/join-command.sh"
    #     owner: "{{ ansible_user }}"
    #     group: "{{ ansible_user }}"
    #     mode: "0755"

    # - name: Copy join command to user's home directory
    #   copy:
    #     content: "{{ join_command.stdout_lines[0] }}"
    #     dest: "/home/{{ ansible_user }}/join-command.sh"
    #     owner: "{{ ansible_user }}"
    #     group: "{{ ansible_user }}"
    #     mode: "0755"
